@using Newtonsoft.Json
@model IEnumerable<ProjectModels.Match>

@{
    ViewBag.Title = "Match";
}
<div class="site-blocks-cover overlay" style="background-image: url(@Url.Content("~/images/hero_bg_3.jpg"));" data-aos="fade" data-stellar-background-ratio="0.5">
    <div class="container">
        <div class="row align-items-center justify-content-start">
            <div class="col-md-6 text-center text-md-left" data-aos="fade-up" data-aos-delay="400">
                <h1 class="bg-text-line">Match</h1>
                <p class="mt-4">Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad maxime velit nostrum praesentium voluptatem. Mollitia perferendis dolore dolores.</p>
            </div>
        </div>
    </div>
</div>


<div class="site-section site-blocks-vs">
    <div class="container">
        @{
            var sortedMatches = Model.OrderByDescending(m => m.Result != null)
                 .ThenByDescending(m => m.Result != null ? m.MatchTime : DateTime.MaxValue)
                 .Take(1)
                 .ToList();
        }
        @foreach (var item in sortedMatches)
        {
            <div class="row">
                <div class="col-md-12">
                    <div class="bg-image overlay-success rounded mb-5" style="background-image: url(@Url.Content("~/images/hero_bg_1.jpg"));" data-stellar-background-ratio="0.5">

                        <div class="row align-items-center">
                            <div class="col-md-12 col-lg-4 mb-4 mb-lg-0">

                                <div class="text-center text-lg-left">
                                    <div class="d-block d-lg-flex align-items-center">
                                        <div class="image mx-auto mb-3 mb-lg-0 mr-lg-3">
                                            <img src="@Url.Content("~/images/Logo/" + item.HomeTeam.Logo)" alt="@item.HomeTeam.TeamName" class="img-fluid">
                                        </div>
                                        <div class="text">
                                            <h3 class="h5 mb-0 text-black">@item.HomeTeam.TeamName</h3>
                                            <span class="text-uppercase small country text-black">@item.HomeTeam.TeamCity</span>
                                        </div>
                                    </div>
                                </div>

                            </div>
                            <div class="col-md-12 col-lg-4 text-center mb-4 mb-lg-0">
                                <div class="d-inline-block">
                                    <p class="mb-2"><small class="text-uppercase text-black font-weight-bold">Last Match</small></p>
                                    <div class="bg-black py-2 px-4 mb-2 text-white d-inline-block rounded"><span class="h3"> <span class="h3">@item.Result</span></span></div>
                                    <p class="mb-0"><small class="text-uppercase text-black font-weight-bold">@item.MatchTime.ToString("dd MMMM / h:mm tt")</small></p>
                                </div>
                            </div>

                            <div class="col-md-12 col-lg-4 text-center text-lg-right">
                                <div class="">
                                    <div class="d-block d-lg-flex align-items-center">
                                        <div class="image mx-auto ml-lg-3 mb-3 mb-lg-0 order-2">
                                            <img src="@Url.Content("~/images/Logo/" + item.AwayTeam.Logo)" alt="@item.AwayTeam.TeamName" class="img-fluid">
                                        </div>
                                        <div class="text order-1">
                                            <h3 class="h5 mb-0 text-black">@item.AwayTeam.TeamName</h3>
                                            <span class="text-uppercase small country text-black">@item.AwayTeam.TeamCity</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12 text-center mt-4">
                                @if (item.Competition != null)
                                {
                                    <p class="mb-0"><small class="text-uppercase text-black font-weight-bold">Competition: @item.Competition.Name</small></p>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        <div class="site-section site-blocks-vs">
            <div class="container">
                @{
                    var upcomingMatches = Model.Where(m => m.MatchTime > DateTime.UtcNow).OrderBy(m => m.MatchTime).ToList();
                    if (upcomingMatches.Any())
                    {

                        var nextMatch = upcomingMatches.First();
                        var countdownDate = nextMatch.MatchTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ");

                        <div class="border mb-3 rounded d-block d-lg-flex align-items-center p-3 next-match">
                            <div class="mr-auto order-md-1 w-60 text-center text-lg-left mb-3 mb-lg-0">
                                Next match
                                (<span id="competition-name">(@nextMatch.Competition.Name)</span>)
                                <div id="date-countdown"></div>
                            </div>

                            <div class="ml-auto pr-4 order-md-2">
                                <div class="h5 text-black text-uppercase text-center text-lg-left">
                                    <div class="d-block d-md-inline-block mb-3 mb-lg-0">
                                        <img src="@Url.Content("~/images/Logo/" + @nextMatch.HomeTeam.Logo)" id="home-team-logo" alt="Image" class="mr-3 image">
                                        <span id="home-team-name" class="d-block d-md-inline-block ml-0 ml-md-3 ml-lg-0">@nextMatch.HomeTeam.TeamName</span>
                                    </div>
                                    <span class="text-muted mx-3 text-normal mb-3 mb-lg-0 d-block d-md-inline ">vs</span>
                                    <div class="d-block d-md-inline-block">
                                        <img id="away-team-logo" src="@Url.Content("~/images/Logo/" + @nextMatch.AwayTeam.Logo)" alt="Image" class="mr-3 image">
                                        <span id="away-team-name" class="d-block d-md-inline-block ml-0 ml-md-3 ml-lg-0">@nextMatch.AwayTeam.TeamName</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <script>
    function startCountdown(nextMatch) {
        var x;

        var countdownDate = new Date(nextMatch.MatchTime).getTime();

        function updateCountdown() {
            var now = new Date().getTime();
            var distance = countdownDate - now;

            var weeks = Math.floor(distance / (1000 * 60 * 60 * 24 * 7));
            var days = Math.floor((distance % (1000 * 60 * 60 * 24 * 7)) / (1000 * 60 * 60 * 24));
            var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((distance % (1000 * 60)) / 1000);

            var countdownHtml =
                '<span class="countdown-block"><span class="label">' + weeks + '</span> weeks </span>' +
                '<span class="countdown-block"><span class="label">' + days + '</span> days </span>' +
                '<span class="countdown-block"><span class="label">' + hours + '</span> hr </span>' +
                '<span class="countdown-block"><span class="label">' + minutes + '</span> min </span>' +
                '<span class="countdown-block"><span class="label">' + seconds + '</span> sec</span>';

            document.getElementById("date-countdown").innerHTML = countdownHtml;

            if (distance <= 0) {
                clearInterval(x);
                document.getElementById("date-countdown").innerHTML = "Match has started!";
                loadNextMatchAndStartCountdown();
            }
        }

        updateCountdown();
        x = setInterval(updateCountdown, 1000);
    }

    function loadNextMatchAndStartCountdown() {
        var upcomingMatches = @Html.Raw(JsonConvert.SerializeObject(Model.Where(m => m.MatchTime > DateTime.UtcNow).OrderBy(m => m.MatchTime).ToList()));
        var nextMatch = upcomingMatches.find(function(match) {
            return new Date(match.MatchTime).getTime() > Date.now();
        });

       if (nextMatch) {
    startCountdown(nextMatch);

    document.getElementById("home-team-logo").src = '@Url.Content("~/images/Logo/")' + nextMatch.HomeTeam.Logo;
    document.getElementById("home-team-name").innerText = nextMatch.HomeTeam.TeamName;
    document.getElementById("away-team-logo").src = '@Url.Content("~/images/Logo/")' + nextMatch.AwayTeam.Logo;
    document.getElementById("away-team-name").innerText = nextMatch.AwayTeam.TeamName;
    document.getElementById("competition-name").innerText = nextMatch.Competition != null ? nextMatch.Competition.Name : "Unknown Competition";
}

    }

    loadNextMatchAndStartCountdown();
                        </script>







                    }
                }
            </div>
        </div>


        <div class="container">
            <div class="col-md-4">
                <label for="competitionSelect">Filter by Competition:</label>
                <select id="competitionSelect" class="form-control">
                    <option value="">All Competitions</option>
                    @foreach (var competition in ViewBag.Competitions)
                    {
                        <option value="@competition.Id">@competition.Name</option>
                    }
                </select>
            </div>

            <div class="row align-items-center mb-5">
                <div class="col-md-12">
                    @{
                        var sortedMatches1 = Model.OrderBy(m => m.MatchTime).ToList();
                    }
                    @foreach (var item in sortedMatches1)
                    {
                        <div class="row bg-white align-items-center ml-0 mr-0 py-4 match-entry" data-competition-id="@item.Competition.Id">
                            <div class="col-md-4 col-lg-4 mb-4 mb-lg-0">
                                <div class="text-center text-lg-left">
                                    <div class="d-block d-lg-flex align-items-center">
                                        <div class="image image-small text-center mb-3 mb-lg-0 mr-lg-3">
                                            <img src="@Url.Content("~/images/Logo/" + item.HomeTeam.Logo)" alt="@item.HomeTeam.TeamName" class="img-fluid">
                                        </div>
                                        <div class="text">
                                            <h3 class="h5 mb-0 text-black">@item.HomeTeam.TeamName</h3>
                                            <span class="text-uppercase small country">@item.HomeTeam.TeamCity</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4 col-lg-4 text-center mb-4 mb-lg-0">
                                <div class="d-inline-block">
                                    <div class="bg-black py-2 px-4 mb-2 text-white d-inline-block rounded">
                                        @if (item.Result != null)
                                        {
                                            <span class="h5 big-text">@item.Result</span><br>
                                            <span class="small">@item.MatchTime</span><br>
                                            <span class="small">@item.Competition.Name</span>
                                        }
                                        else
                                        {
                                            <span class="h5">@item.MatchTime</span><br>
                                            <span class="h5">@item.Competition.Name</span>
                                        }
                                        <p class="mb-0">
                                            <small class="text-uppercase text-black font-weight-bold">
                                                @if (item.Competition != null)
                                                {
                                                    @item.Competition.Name
                                                }
                                            </small>
                                        </p>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-4 col-lg-4 text-center text-lg-right">
                                <div class="">
                                    <div class="d-block d-lg-flex align-items-center">
                                        <div class="image image-small ml-lg-3 mb-3 mb-lg-0 order-2">
                                            <img src="@Url.Content("~/images/Logo/" + item.AwayTeam.Logo)" alt="@item.AwayTeam.TeamName" class="img-fluid">
                                        </div>
                                        <div class="text order-1 w-100">
                                            <h3 class="h5 mb-0 text-black">@item.AwayTeam.TeamName</h3>
                                            <span class="text-uppercase small country">@item.AwayTeam.TeamCity</span>
                                        </div>
                                    </div>
                                </div>


                            </div>

                        </div>
                    }


                </div>
            </div>

        </div>
        <div class="pagination-container text-center">
            <button id="prev-page-btn" class="btn btn-primary">Previous</button>
            <span id="page-num">Page 1</span>
            <button id="next-page-btn" class="btn btn-primary">Next</button>
        </div>
        <script>document.addEventListener("DOMContentLoaded", function () {
                const selectElement = document.getElementById("competitionSelect");
                const matchEntries = document.querySelectorAll(".match-entry");

                selectElement.addEventListener("change", function () {
                    const selectedCompetitionId = this.value;

                    matchEntries.forEach(function (entry) {
                        const entryCompetitionId = entry.getAttribute("data-competition-id");

                        if (selectedCompetitionId === "" || entryCompetitionId === selectedCompetitionId) {
                            entry.style.display = ""; 
                        } else {
                            entry.style.display = "none";
                        }
                    });
                });
            });</script>
        <script>document.addEventListener("DOMContentLoaded", function () {
            
            var matches = document.querySelectorAll(".match-entry");
            var pageSize = 3; 
            var currentPage = 1;

          
            displayPage(currentPage);

        
            document.getElementById("prev-page-btn").addEventListener("click", function () {
                if (currentPage > 1) {
                    currentPage--;
                    displayPage(currentPage);
                }
            });

         
            document.getElementById("next-page-btn").addEventListener("click", function () {
                if (currentPage < Math.ceil(matches.length / pageSize)) {
                    currentPage++;
                    displayPage(currentPage);
                }
            });

           
            function displayPage(page) {
                var startIdx = (page - 1) * pageSize;
                var endIdx = startIdx + pageSize;

                for (var i = 0; i < matches.length; i++) {
                    if (i >= startIdx && i < endIdx) {
                        matches[i].style.display = "";
                    } else {
                        matches[i].style.display = "none";
                    }
                }

                document.getElementById("page-num").innerText = "Page " + page;
            }
        });</script>
        <script>document.addEventListener("DOMContentLoaded", function () {
                const yearMonthDropdownItems = document.querySelectorAll(".dropdown-item");
                const matchEntries = document.querySelectorAll(".match-entry");
                const pageSize = 3; 
                let currentPage = 1;

                yearMonthDropdownItems.forEach(function (item) {
                    item.addEventListener("click", function (event) {
                        event.preventDefault();
                        const selectedYearMonth = this.getAttribute("data-year-month");
                        // Lọc và hiển thị các trận đấu theo năm và tháng
                        filterMatchesByYearMonth(selectedYearMonth);
                    });
                });

                // Hiển thị trang đầu tiên và ẩn các trang khác
                displayPage(currentPage);

                // Xử lý sự kiện khi nhấn nút "Previous"
                document.getElementById("prev-page-btn").addEventListener("click", function () {
                    if (currentPage > 1) {
                        currentPage--;
                        displayPage(currentPage);
                    }
                });

                // Xử lý sự kiện khi nhấn nút "Next"
                document.getElementById("next-page-btn").addEventListener("click", function () {
                    if (currentPage < Math.ceil(matchEntries.length / pageSize)) {
                        currentPage++;
                        displayPage(currentPage);
                    }
                });

                // Hiển thị trang hiện tại và ẩn các trang khác
                function displayPage(page) {
                    const startIdx = (page - 1) * pageSize;
                    const endIdx = startIdx + pageSize;

                    for (let i = 0; i < matchEntries.length; i++) {
                        if (i >= startIdx && i < endIdx) {
                            matchEntries[i].style.display = "";
                        } else {
                            matchEntries[i].style.display = "none";
                        }
                    }

                    document.getElementById("page-num").innerText = "Page " + page;
                }

                // Lọc và hiển thị các trận đấu theo năm và tháng
                function filterMatchesByYearMonth(selectedYearMonth) {
                    for (let i = 0; i < matchEntries.length; i++) {
                        const matchDate = new Date(matchEntries[i].querySelector(".small").innerText);
                        const matchYearMonth = matchDate.toISOString().slice(0, 7);

                        if (selectedYearMonth === "" || matchYearMonth === selectedYearMonth) {
                            matchEntries[i].style.display = "";
                        } else {
                            matchEntries[i].style.display = "none";
                        }
}

                    // Hiển thị kết quả lọc
                    currentPage = 1;
                    displayPage(currentPage);
                }
            });</script>


        <style>
            .big-text {
                font-size: 24px;
                font-weight: bold;
            }
        </style>
    </div>
</div>